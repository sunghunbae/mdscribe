#!/usr/bin/env python3

import argparse
import pandas as pd
import sys
from matplotlib import pyplot as plt
from mdscribe import desmond

def read_eaf(filename, verbose=False):
    HBond = {}
    Hydrophobic = {}
    WaterBridge = {}
    Polar = {}
    HalogenBond = {}
    LigWat = {}
    Metal = {}
    PiCat = {}
    PiPi = {}

    result = desmond.expr.parse_file(filename)
    d = result.as_dict()
    desmond.traverse_dict(d)
    dot = desmond.DotMap(d)

    for section in dot.Keywords:
        try:
            assert section.ProtLigInter.HBondResult
            num_frames = len(section.ProtLigInter.HBondResult)
            for frame in section.ProtLigInter.HBondResult:
                # [[3 "_:ARG_143:HH22" d-s "L-FRAG_0:N6" ]]
                for (frameno, prot, hbond_type, lig) in frame:
                    prot = prot.strip('\"')
                    (_, resid, atom) = prot.split(":")
                    (resName, resSeq) = resid.split("_")
                    resSeq = int(resSeq)
                    if resSeq in HBond:
                        HBond[resSeq]['count'] += 1
                    else:
                        HBond[resSeq] = {'resName': resName, 'count':1 }
            for resSeq in sorted(HBond):
                fraction = float(HBond[resSeq]['count'])/num_frames
                if verbose:
                    print(f"HBond {HBond[resSeq]['resName']}_{resSeq} {fraction:5.3f} {num_frames}")
        except:
            pass

        try:
            assert section.ProtLigInter.HydrophobicResult
            num_frames = len(section.ProtLigInter.HydrophobicResult)
            for frame in section.ProtLigInter.HydrophobicResult:
                # [[0 "_:PHE_223" L-FRAG_0 ] [0 "_:ALA_241" L-FRAG_0 ]]
                for (frameno, prot, lig) in frame:
                    prot = prot.strip('\"')
                    (_, resid) = prot.split(":")
                    (resName, resSeq) = resid.split("_")
                    resSeq = int(resSeq)
                    if resSeq in Hydrophobic:
                        Hydrophobic[resSeq]['count'] += 1
                    else:
                        Hydrophobic[resSeq] = {'resName': resName, 'count':1 }
            for resSeq in sorted(Hydrophobic):
                fraction = float(Hydrophobic[resSeq]['count'])/num_frames
                if verbose:
                    print(f"Hydrophobic {Hydrophobic[resSeq]['resName']}_{resSeq} {fraction:5.3f} {num_frames}")
        except:
            pass
        
        try:
            assert section.ProtLigInter.PolarResult
            num_frames = len(section.ProtLigInter.PolarResult)
            for frame in section.ProtLigInter.PolarResult:
                # [[1 "_:GLU_216:OE2" b "L-FRAG_1:N3" 4.45 ]]
                for (frameno, prot, _, lig, _) in frame:
                    prot = prot.strip('\"')
                    (_, resid, atom) = prot.split(":")
                    (resName, resSeq) = resid.split("_")
                    resSeq = int(resSeq)
                    if resSeq in Polar:
                        Polar[resSeq]['count'] += 1
                    else:
                        Polar[resSeq] = {'resName': resName, 'count':1 }
            for resSeq in sorted(Polar):
                fraction = float(Polar[resSeq]['count'])/num_frames
                if verbose:
                    print(f"Polar {Polar[resSeq]['resName']}_{resSeq} {fraction:5.3f} {num_frames}")
        except:
            pass

        try:
            assert section.ProtLigInter.WaterBridgeResult
            num_frames = len(section.ProtLigInter.WaterBridgeResult)
            for frame in section.ProtLigInter.WaterBridgeResult:
                # [[3 "_:GLU_216:OE2" a "L-FRAG_0:N2" a 2431 ]]
                for (frameno, prot, _, lig, _, _) in frame:
                    prot = prot.strip('\"')
                    (_, resid, atom) = prot.split(":")
                    (resName, resSeq) = resid.split("_")
                    resSeq = int(resSeq)
                    if resSeq in WaterBridge:
                        WaterBridge[resSeq]['count'] += 1
                    else:
                        WaterBridge[resSeq] = {'resName': resName, 'count':1 }
            for resSeq in sorted(WaterBridge):
                fraction = float(WaterBridge[resSeq]['count'])/num_frames
                if verbose:
                    print(f"WaterBridge {WaterBridge[resSeq]['resName']}_{resSeq} {fraction:5.3f} {num_frames}")
        except:
            pass

    return num_frames, HBond, Hydrophobic, Polar, WaterBridge, HalogenBond, LigWat, Metal, PiCat, PiPi



if __name__ == "__main__":
    teststring ="""Keywords = [
    {RMSD = {
        ASL = "((mol. 1 and backbone) and not (atom.ele H) and not (mol. 2))"
        Frame = 0
        Panel = pl_interact_survey
        Result = [0.0 1.161 1.286 1.331 1.176 1.195 ]
        SelectionType = Backbone
        Tab = pl_rmsd_tab
        Type = ASL
        Unit = Angstrom
        }
    }
    {RMSD = {
        ASL = "(mol. 1 and sidechain and not (mol. 2))"
        Frame = 0
        Panel = pl_interact_survey
        Result = [0.0 1.161 1.286 1.331 1.176 1.195 ]
        SelectionType = "Side chains"
        Tab = pl_rmsd_tab
        Type = ASL
        Unit = Angstrom
        }
    }
    ]"""
    # result = expr.parse_string(teststring)
    # d = result.as_dict()
    # traverse_dict(d)
    # dot = DotMap(d)
    # try:
    #     assert dot.Keywords[1].RMSD.SelectionType == '"Side chains"'
    #     print("ok")
    # except:
    #     print("error")

    parser = argparse.ArgumentParser(description="Average Protein-Ligand Interactions",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--out', dest='out', default='mean-PLIF', help="output basename")
    parser.add_argument('eaf', nargs='+', default=[], help='input -out.eaf filename(s)')
    args = parser.parse_args()

    if len(args.eaf) == 0:
        argparse.print_help()
        sys.exit(0)

    total_num_frames = 0
    data = {}
    for filename in args.eaf:
        (num_frames, HBond, Hydrophobic, Polar, WaterBridge, 
        HalogenBond, LigWat, Metal, PiCat, PiPi) = read_eaf(filename, verbose=False)
        
        total_num_frames += num_frames
        
        print(f"{filename}  {num_frames} frames")
        
        for resSeq in HBond:
            if resSeq in data:
                data[resSeq]['hbond'] += HBond[resSeq]['count']
            else:
                data[resSeq] = {'resName': HBond[resSeq]['resName'], 
                                'hbond': HBond[resSeq]['count'],
                                'hydrophobic': 0,
                                'polar': 0,
                                'waterbridge': 0,
                                }
        for resSeq in Hydrophobic:
            if resSeq in data:
                data[resSeq]['hydrophobic'] += Hydrophobic[resSeq]['count']
            else:
                data[resSeq] = {'resName': Hydrophobic[resSeq]['resName'], 
                                'hbond': 0,
                                'hydrophobic': Hydrophobic[resSeq]['count'],
                                'polar': 0,
                                'waterbridge': 0,
                                }
        for resSeq in Polar:
            if resSeq in data:
                data[resSeq]['polar'] += Polar[resSeq]['count']
            else:
                data[resSeq] = {'resName': Polar[resSeq]['resName'], 
                                'hbond': 0,
                                'hydrophobic': 0,
                                'polar': Polar[resSeq]['count'],
                                'waterbridge': 0,
                                }
        for resSeq in WaterBridge:
            if resSeq in data:
                data[resSeq]['waterbridge'] += WaterBridge[resSeq]['count']
            else:
                data[resSeq] = {'resName': WaterBridge[resSeq]['resName'],
                                'hbond': 0,
                                'hydrophobic' : 0,
                                'polar': 0,
                                'waterbridge': WaterBridge[resSeq]['count'],
                                } 

    csvdata = {'resid':[], 
               'resSeq':[], 
               'resName':[], 
               'hbond':[], 
               'hydrophobic':[],
               'polar': [],
               'waterbridge': [],
               }
    
    for resSeq in sorted(data):
        csvdata['resSeq'].append(resSeq)
        csvdata['resName'].append(data[resSeq]['resName'])
        csvdata['resid'].append(f"{data[resSeq]['resName']}_{resSeq}")
        csvdata['hbond'].append(float(data[resSeq]['hbond'])/total_num_frames)
        csvdata['hydrophobic'].append(float(data[resSeq]['hydrophobic'])/total_num_frames)
        csvdata['polar'].append(float(data[resSeq]['polar'])/total_num_frames)
        csvdata['waterbridge'].append(float(data[resSeq]['waterbridge'])/total_num_frames)

    df = pd.DataFrame(csvdata)
    df.to_csv(args.out + '.csv', index=False, float_format='%.4f')
    g = df.loc[:, ~df.columns.isin(['resSeq','resName'])].plot.bar(
        x="resid", 
        stacked=True,
        title="Protein-Ligand Interactions", 
        xlabel='Residue', 
        ylabel='Fraction of MD trajectory', 
        figsize=(8,3), 
        fontsize=8,
        )
    fig = g.get_figure()
    fig.savefig(args.out + '.pdf', bbox_inches="tight", pad_inches=0.2, dpi=150)
